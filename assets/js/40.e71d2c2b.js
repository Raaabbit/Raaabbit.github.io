(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{458:function(v,_,t){"use strict";t.r(_);var a=t(25),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"认识数据结构与算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#认识数据结构与算法"}},[v._v("#")]),v._v(" 认识数据结构与算法")]),v._v(" "),t("h2",{attrs:{id:"什么是数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据结构"}},[v._v("#")]),v._v(" 什么是数据结构")]),v._v(" "),t("blockquote",[t("p",[v._v("数据是信息的载体，是描述客观事物的数、字符，以及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。"),t("br"),v._v("\n数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科")])]),v._v(" "),t("p",[v._v("简单来说 程序设计 = 数据结构 + 算法"),t("br"),v._v("\n数据结构研究的就是关系，就是数据元素相互之间存在的一种或多种特定关系的集合")]),v._v(" "),t("h5",{attrs:{id:"逻辑结构和物理结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑结构和物理结构"}},[v._v("#")]),v._v(" 逻辑结构和物理结构")]),v._v(" "),t("p",[v._v("我们把数据结构分为逻辑结构和物理结构")]),v._v(" "),t("ul",[t("li",[v._v("逻辑结构是指数据对象中数据元素之间的相互关系")]),v._v(" "),t("li",[v._v("物理结构是指书记的逻辑结构在计算机中的存储方式")])]),v._v(" "),t("h5",{attrs:{id:"四大逻辑结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四大逻辑结构"}},[v._v("#")]),v._v(" 四大逻辑结构")]),v._v(" "),t("ul",[t("li",[v._v("集合结构：集合结构中的数据元素除了同属一个集合外，他们之间没有特别的关系")]),v._v(" "),t("li",[v._v("线性结构：线性结构的元素关系有一对一的关系")]),v._v(" "),t("li",[v._v("树形结构：树形结构中的元素有一对多的层次关系")]),v._v(" "),t("li",[v._v("图形结构：图形结构的元素是多对多的关系")])]),v._v(" "),t("h4",{attrs:{id:"物理结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#物理结构"}},[v._v("#")]),v._v(" 物理结构")]),v._v(" "),t("p",[v._v("物理结构是如何把数据元素储存到计算机的存储器中"),t("br"),v._v("\n主要是相对于内存而言的，硬盘软盘光盘等外部存储器的数据组织常用文件结构来描述"),t("br"),v._v("\n数据元素的存储结构形式主要有两种：顺序存储和链式存储")]),v._v(" "),t("ul",[t("li",[v._v("顺序存储结构：吧书记元素村饭在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的，比如数组")]),v._v(" "),t("li",[v._v("链式存储结构是把数据元素放在任意的存储单元里，这组存储单元可以是连续的，也可以是非连续的。显然链式存储结构并不能反映其逻辑关系，因此需要一个指针存放数据元素的地址，这样子通过地址。就可以找到相关联元素的位置，每个元素具有自己的值和指向其他元素的一个指针。我们有一个形象的例子:比如再银行我们等待叫号，在等待的时候我们可以任意移动，我们只需要关注前一个号有没有被叫到。可以看出，相比于顺序存储结构，链式存储结构更加灵活。")])]),v._v(" "),t("h2",{attrs:{id:"什么是算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是算法"}},[v._v("#")]),v._v(" 什么是算法")]),v._v(" "),t("p",[v._v("算法之魂——效率")]),v._v(" "),t("blockquote",[t("p",[v._v("算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作")])]),v._v(" "),t("p",[v._v("一个例子：")]),v._v(" "),t("blockquote",[t("p",[v._v("例：计算1+2+3+...+99+100\n显然的，我们不能一个个计算，我们可以采用伟大的数学家高斯的方法，高斯求和公式（首项+末项）"),t("em",[v._v("项数")]),v._v("1/2")])]),v._v(" "),t("h5",{attrs:{id:"算法的五个基本特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法的五个基本特征"}},[v._v("#")]),v._v(" 算法的五个基本特征")]),v._v(" "),t("ul",[t("li",[v._v("输入：算法需要零个或多个输入。")]),v._v(" "),t("li",[v._v("输出：算法至少要有一个或多个输出，可以是已打印形式输出，也可以返回一个值或多个值等。")]),v._v(" "),t("li",[v._v("有穷性：指算法在执行有限步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。")]),v._v(" "),t("li",[v._v("确定性：算法的每一个步骤都有确定的含义，算法在一定条件下周一一条确定路径相同的输入只能有唯一的输出结果。算法的每个步骤都应该被精确定义而无歧义。")]),v._v(" "),t("li",[v._v("可行性：算法的每一个步骤都必须是可行的，也就是说，每一步都能通过执行有限次数完成")])]),v._v(" "),t("h4",{attrs:{id:"算法设计的要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法设计的要求"}},[v._v("#")]),v._v(" 算法设计的要求")]),v._v(" "),t("ul",[t("li",[v._v("正确性：指算法至少有输入输出和加工问题处理无歧义性，能正确反映问题的需求、能够得到问题的正确答案。大概有一下四个层次：1.没有语法错误。2.算法程序队以合法输入能产生满足要求的输出。3.算法程序对于非法输入能够产生满足规格的说明。4.算法程序对于故意刁难的测试输入都有满足要求的输出结果。")]),v._v(" "),t("li",[v._v("可使用性要求算法能够很方便的使用，要求该算法有良好的界面和完备的用户文档。")]),v._v(" "),t("li",[v._v("可读性：算法设计的另一目的是为了便于阅读、理解和交流，因此要有良好的代码结构，合理恰当地注释。")]),v._v(" "),t("li",[v._v("健壮性：当输入数据不合法时也可以做出相关处理，而不是产生异常、崩溃或其他莫名其妙的结果。")]),v._v(" "),t("li",[v._v("效率：算法的效率包括空间代价和时间代价。")]),v._v(" "),t("li",[v._v("简单性：算法的简单性是指一个算法采用的数据结构和方法的简单程度。与用户编写分析调试相关，与出错率直接相关。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);